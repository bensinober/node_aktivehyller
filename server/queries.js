const { SparqlClient, SPARQL } = require('sparql-client-2')

module.exports = (config) => {
  const client = new SparqlClient('http://localhost:8890/sparql')

  const prefixes = `PREFIX dct: <http://purl.org/dc/terms/>
    PREFIX deich: <http://data.deichman.no/>
    PREFIX lille: <http://data.lillehammer.folkebibl.no/>
    PREFIX foaf: <http://xmlns.com/foaf/0.1/>
    PREFIX bibo: <http://purl.org/ontology/bibo/>
    PREFIX rda: <http://rdvocab.info/Elements/>
    PREFIX fabio: <http://purl.org/spar/fabio/>
    PREFIX rev: <http://purl.org/stuff/rev#>
    PREFIX iface: <http://www.multimedian.nl/projects/n9c/interface#>`

  return {
    getFormatAndTitle: function(uri) {
      const q =
        `${prefixes}
        SELECT ?title ?format FROM <${config.graph}>
        WHERE { <${uri}> dct:title ?title .
          <${uri}> dct:format ?format . }`
      return client.query(q).execute()
    },

    fetchRandomBook: function() {
      const q = `${prefixes}
      SELECT DISTINCT ?tnr FROM <${config.graph}> WHERE {
        ?tnr a fabio:Manifestation ;
        dct:format <http://data.deichman.no/format/Book> ;
        deich:literaryFormat dbpedia:Fiction ;
        dct:language <http://lexvo.org/id/iso639-3/nor> .
        }
        ORDER BY RAND()
        LIMIT 1`

       return client.query(q).execute()
    },

    fetchBookInfo: function(uri) {
      const q = `${prefixes}
          SELECT DISTINCT (sql:SAMPLE (?coverUrl) AS ?coverUrl) (sql:SAMPLE (?altCoverUrl) AS ?altCoverUrl)
          #(sql:SAMPLE (?workAbstract) AS ?workAbstract) (sql:SAMPLE (?workKrydder) AS ?workKrydder)
          ?title ?format ?isbn ?workId ?creatorName ?creatorId ?responsible ?abstract ?krydder ?lang
          FROM <${config.graph}>
          WHERE {
            <${uri}> dct:title ?title .
            <${uri}> dct:language ?lang .
            <${uri}> dct:format ?format .
            OPTIONAL { <${uri}> foaf:depiction ?coverUrl . }
            OPTIONAL { <${uri}> iface:altDepictedBy ?altCoverUrl . }
            OPTIONAL { <${uri}> dct:abstract ?abstract . }
            OPTIONAL { <${uri}> deich:krydder_beskrivelse ?krydder . }
            OPTIONAL { <${uri}> bibo:isbn ?isbn . }
            OPTIONAL { <${uri}> dct:creator ?creatorId .
              ?creatorId foaf:name ?creatorName . }
            OPTIONAL { <${uri}> rda:statementOfResponsibility ?responsible . }
            OPTIONAL { ?workId fabio:hasManifestation <${uri}> . }
            #OPTIONAL { ?workId fabio:hasManifestation ?book .
            #  ?book dct:abstract ?workAbstract . }
            #OPTIONAL { ?workId fabio:hasManifestation ?book .
            #  ?book deich:krydder_beskrivelse ?workKrydder . }
          }`
console.log(q)
        return client.query(q).execute()
    },
    fetchLocalReviews: function(uri) {
      const q = `${prefixes}
        SELECT DISTINCT ?reviewId ?reviewTitle ?reviewText ?reviewSource ?reviewer
        FROM <${config.graph}>
        WHERE {

        GRAPH <${config.graph}> { <${uri}> rev:hasReview ?reviewId . }
          ?reviewId rev:title ?reviewTitle .
          ?reviewId rev:text ?reviewText .
          ?reviewId dct:issued ?issued .
          OPTIONAL { ?reviewId dct:source ?sourceId .
            GRAPH <${config.graph}> { ?sourceId foaf:name ?reviewSource . }
          }
        OPTIONAL { ?reviewId rev:reviewer ?reviewer . }
        }`
console.log(q)
        return client.query(q).execute()
    },
    fetchSameAuthorBooks: function(uri) {
      const q = `${prefixes}
      SELECT DISTINCT (sql:SAMPLE (?coverUrl) AS ?coverUrl) (sql:SAMPLE (?altCoverUrl) AS ?altCoverUrl)
        ?authorWork ?lang ?originalLanguage ?title ?bookId
        FROM <${config.graph}>
        WHERE { <${uri}> dct:creator ?creator .
        ?work fabio:hasManifestation <${uri}> .
        ?authorWork dct:creator ?creator .
        ?authorWork fabio:hasManifestation ?bookId .
        ?bookId dct:language ?lang .
        ?bookId dct:title ?title .
        ?bookId dct:format <http://data.deichman.no/format/Book> .
        OPTIONAL { ?bookId foaf:depiction ?coverUrl . }
        OPTIONAL { ?bookId iface:altDepictedBy ?altCoverUrl . }
        OPTIONAL { ?bookId deich:originalLanguage ?originalLanguage . }
        MINUS { ?work fabio:hasManifestation ?bookId . }
        }`
console.log(q)
      return client.query(q).execute()
    },

    fetchSimilarWorks: function(uri) {
      const q = `${prefixes}
      SELECT DISTINCT (sql:SAMPLE (?coverUrl) AS ?coverUrl)
        (sql:SAMPLE (?altCoverUrl) AS ?altCoverUrl)
        ?bookId ?title ?lang ?creatorName ?creatorId ?originalLanguage ?format ?similarWork
        FROM <${config.graph}>
        WHERE { ?work fabio:hasManifestation <${uri}> .
        ?work dct:creator ?creatorId .
        GRAPH <${config.graph}> { ?work deich:autoGeneratedSimilarity ?similarWork . }
        ?similarWork fabio:hasManifestation ?bookId .
        ?bookId dct:title ?title .
        ?bookId dct:language ?lang .
        ?bookId dct:format ?format .
        OPTIONAL { ?bookId foaf:depiction ?coverUrl . }
        OPTIONAL { ?bookId iface:altDepictedBy ?altCoverUrl . }
        OPTIONAL { ?bookId deich:originalLanguage ?originalLanguage . }
        OPTIONAL { ?bookId dct:creator ?similarBookCreator .
        ?similarBookCreator foaf:name ?creatorName . }
        MINUS { ?similarWork dct:creator ?creatorId . } }`

console.log(q)
      return client.query(q).execute()
    }
  }
}
